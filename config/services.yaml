# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\EventListener\KernelResponseListener:
        tags:
            - { name: kernel.event_listener, event: kernel.response }

    App\EventListener\SetUserLocale:
        tags:
            - { name: kernel.event_listener, event: kernel.request, priority: 15 }

    App\EventListener\UserPasswordListener:
        class: App\EventListener\UserPasswordListener
        arguments:
            - '@security.user_password_encoder.generic'
        tags:
            - { name: doctrine.orm.entity_listener, event: prePersist, entity: App\Entity\User }
            - { name: doctrine.orm.entity_listener, event: preUpdate, entity: App\Entity\User }

    App\Normalizer\UserNormalizer:
        class: App\Normalizer\UserNormalizer
        autowire: true
        calls:
            - method: setJwtManager
              arguments:
                  - '@lexik_jwt_authentication.jwt_manager'
            - method: setRefreshTokenListener
              arguments:
                  - '@gesdinet.jwtrefreshtoken.send_token'

    App\EventListener\AuthenticationSuccessListener:
        class: App\EventListener\AuthenticationSuccessListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    #dirty boy
    gesdinet.jwtrefreshtoken.refresh_token_manager:
        class: App\Gesdinet\FixedRefreshTokenManager
        public: true
        arguments: [ "@gesdinet.jwtrefreshtoken.object_manager", "%gesdinet.jwtrefreshtoken.refresh_token.class%" ]
